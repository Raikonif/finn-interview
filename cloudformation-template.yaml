AWSTemplateFormatVersion: '2010-09-09'
Description: 'Infraestructura completa para aplicación Spring Boot con Frontend, RDS PostgreSQL y MongoDB'

Parameters:
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Nombre del key pair para acceso SSH
    
  DBPassword:
    Type: String
    NoEcho: true
    Description: Password para base de datos PostgreSQL
    MinLength: 8
    
  MongoDBAtlasConnectionString:
    Type: String
    Description: Connection string de MongoDB Atlas (opcional, dejar vacio para usar EC2)
    Default: ""
    
  GitHubRepoURL:
    Type: String
    Description: URL del repositorio GitHub (ej. https://github.com/usuario/repo.git)
    
  Environment:
    Type: String
    Default: production
    AllowedValues:
      - development
      - staging
      - production
    Description: Ambiente de despliegue

Conditions:
  UseMongoDBAtlas: !Not [!Equals [!Ref MongoDBAtlasConnectionString, ""]]
  UseSelfHostedMongoDB: !Equals [!Ref MongoDBAtlasConnectionString, ""]

Resources:
  # ============================================
  # VPC Y NETWORKING
  # ============================================
  
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-IGW

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Subnet Pública para EC2 (Frontend/Backend)
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicSubnet-A

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicSubnet-B

  # Subnets Privadas para RDS y MongoDB
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.10.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateSubnet-A

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.11.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateSubnet-B

  # Route Table Pública
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicRT

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable

  # NAT Gateway para subnets privadas
  NatGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: AttachGateway
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-NatGW

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateRT

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTable

  # ============================================
  # SECURITY GROUPS
  # ============================================

  # Security Group para ALB
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${AWS::StackName}-ALB-SG
      GroupDescription: Security group para Application Load Balancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: HTTP desde Internet
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS desde Internet
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-ALB-SG

  # Security Group para EC2 (Backend/Frontend)
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${AWS::StackName}-EC2-SG
      GroupDescription: Security group para instancias EC2
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
          Description: SSH (CAMBIAR a tu IP en producción)
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !Ref ALBSecurityGroup
          Description: Backend desde ALB
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          SourceSecurityGroupId: !Ref ALBSecurityGroup
          Description: Frontend desde ALB
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-EC2-SG

  # Security Group para RDS
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${AWS::StackName}-RDS-SG
      GroupDescription: Security group para RDS PostgreSQL
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref EC2SecurityGroup
          Description: PostgreSQL desde EC2
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-RDS-SG

  # Security Group para MongoDB (solo si es self-hosted)
  MongoDBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: UseSelfHostedMongoDB
    Properties:
      GroupName: !Sub ${AWS::StackName}-MongoDB-SG
      GroupDescription: Security group para MongoDB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 27017
          ToPort: 27017
          SourceSecurityGroupId: !Ref EC2SecurityGroup
          Description: MongoDB desde EC2
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-MongoDB-SG

  # ============================================
  # IAM ROLES
  # ============================================

  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-EC2-Role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Policies:
        - PolicyName: ECRAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetAuthorizationToken
                Resource: '*'
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref DBSecret
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-EC2-Role

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub ${AWS::StackName}-EC2-Profile
      Roles:
        - !Ref EC2Role

  # ============================================
  # SECRETS MANAGER
  # ============================================

  DBSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub ${AWS::StackName}-db-credentials
      Description: Credenciales de base de datos
      SecretString: !Sub |
        {
          "username": "admin",
          "password": "${DBPassword}",
          "engine": "postgres",
          "host": "${RDSInstance.Endpoint.Address}",
          "port": 5432,
          "dbname": "app"
        }

  # ============================================
  # RDS POSTGRESQL
  # ============================================

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupName: !Sub ${AWS::StackName}-db-subnet-group
      DBSubnetGroupDescription: Subnet group para RDS
      SubnetIds:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-DBSubnetGroup

  RDSInstance:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Snapshot
    Properties:
      DBInstanceIdentifier: !Sub ${AWS::StackName}-postgres
      DBInstanceClass: db.t3.micro
      Engine: postgres
      EngineVersion: '16.1'
      MasterUsername: admin
      MasterUserPassword: !Ref DBPassword
      DBName: app
      AllocatedStorage: 20
      StorageType: gp3
      StorageEncrypted: true
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      BackupRetentionPeriod: 7
      PreferredBackupWindow: 03:00-04:00
      PreferredMaintenanceWindow: mon:04:00-mon:05:00
      EnableCloudwatchLogsExports:
        - postgresql
      DeletionProtection: false
      PubliclyAccessible: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-RDS

  # ============================================
  # EC2 PARA MONGODB (Solo si es self-hosted)
  # ============================================

  MongoDBInstance:
    Type: AWS::EC2::Instance
    Condition: UseSelfHostedMongoDB
    Properties:
      ImageId: !Sub '{{resolve:ssm:/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64}}'
      InstanceType: t3.small
      KeyName: !Ref KeyPairName
      IamInstanceProfile: !Ref EC2InstanceProfile
      NetworkInterfaces:
        - AssociatePublicIpAddress: false
          DeviceIndex: 0
          GroupSet:
            - !Ref MongoDBSecurityGroup
          SubnetId: !Ref PrivateSubnetA
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 30
            VolumeType: gp3
            Encrypted: true
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          
          # Instalar Docker
          yum install docker -y
          systemctl start docker
          systemctl enable docker
          usermod -a -G docker ec2-user
          
          # Crear directorio para datos
          mkdir -p /data/mongodb
          
          # Iniciar MongoDB
          docker run -d \
            --name mongodb \
            --restart always \
            -p 27017:27017 \
            -v /data/mongodb:/data/db \
            -e MONGO_INITDB_ROOT_USERNAME=admin \
            -e MONGO_INITDB_ROOT_PASSWORD=${DBPassword} \
            mongo:7
            
          # CloudWatch Logs Agent
          yum install amazon-cloudwatch-agent -y
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-MongoDB

  # ============================================
  # APPLICATION LOAD BALANCER
  # ============================================

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${AWS::StackName}-ALB
      Type: application
      Scheme: internet-facing
      IpAddressType: ipv4
      Subnets:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-ALB

  # Target Group para Backend
  BackendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${AWS::StackName}-backend-tg
      Port: 8080
      Protocol: HTTP
      VpcId: !Ref VPC
      HealthCheckEnabled: true
      HealthCheckPath: /actuator/health
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      TargetType: instance
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-backend-tg

  # Target Group para Frontend
  FrontendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${AWS::StackName}-frontend-tg
      Port: 3000
      Protocol: HTTP
      VpcId: !Ref VPC
      HealthCheckEnabled: true
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      TargetType: instance
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-frontend-tg

  # Listener HTTP
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref FrontendTargetGroup

  # Regla para Backend (/api/*)
  BackendListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref ALBListener
      Priority: 10
      Conditions:
        - Field: path-pattern
          Values:
            - /api/*
      Actions:
        - Type: forward
          TargetGroupArn: !Ref BackendTargetGroup

  # ============================================
  # EC2 PARA APLICACIÓN
  # ============================================

  AppLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-app-template
      LaunchTemplateData:
        ImageId: !Sub '{{resolve:ssm:/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64}}'
        InstanceType: t3.medium
        KeyName: !Ref KeyPairName
        IamInstanceProfile:
          Arn: !GetAtt EC2InstanceProfile.Arn
        SecurityGroupIds:
          - !Ref EC2SecurityGroup
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              VolumeSize: 30
              VolumeType: gp3
              Encrypted: true
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            set -e
            
            # Actualizar sistema
            yum update -y
            
            # Instalar Docker y Docker Compose
            yum install docker git -y
            systemctl start docker
            systemctl enable docker
            usermod -a -G docker ec2-user
            
            # Instalar Docker Compose
            curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose
            
            # Obtener credenciales de Secrets Manager
            yum install jq -y
            DB_SECRET=$(aws secretsmanager get-secret-value --secret-id ${DBSecret} --region ${AWS::Region} --query SecretString --output text)
            DB_HOST=$(echo $DB_SECRET | jq -r '.host')
            DB_PASSWORD=$(echo $DB_SECRET | jq -r '.password')
            
            # Clonar repositorio
            cd /home/ec2-user
            git clone ${GitHubRepoURL} app
            cd app
            
            # Crear archivo .env
            cat > .env << EOF
            POSTGRES_HOST=$DB_HOST
            POSTGRES_PASSWORD=$DB_PASSWORD
            POSTGRES_USER=admin
            POSTGRES_DB=app
            MONGO_URI=${MongoDBAtlasConnectionString}
            ENVIRONMENT=${Environment}
            EOF
            
            # Configurar docker-compose para no usar MongoDB si hay Atlas
            if [ -n "${MongoDBAtlasConnectionString}" ]; then
              # Comentar servicio MongoDB en docker-compose.yml
              sed -i '/mongodb:/,/networks:/s/^/#/' docker-compose.yml
            fi
            
            # Levantar aplicación
            docker-compose up -d --build
            
            # Configurar CloudWatch Logs
            yum install amazon-cloudwatch-agent -y
            
            # Logs de aplicación
            cat > /opt/aws/amazon-cloudwatch-agent/etc/cloudwatch-config.json << 'CWCONFIG'
            {
              "logs": {
                "logs_collected": {
                  "files": {
                    "collect_list": [
                      {
                        "file_path": "/var/log/messages",
                        "log_group_name": "${AWS::StackName}-system-logs",
                        "log_stream_name": "{instance_id}"
                      }
                    ]
                  }
                }
              }
            }
            CWCONFIG
            
            /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl \
              -a fetch-config \
              -m ec2 \
              -s \
              -c file:/opt/aws/amazon-cloudwatch-agent/etc/cloudwatch-config.json
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub ${AWS::StackName}-app-instance

  AppAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub ${AWS::StackName}-app-asg
      VPCZoneIdentifier:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
      LaunchTemplate:
        LaunchTemplateId: !Ref AppLaunchTemplate
        Version: !GetAtt AppLaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 3
      DesiredCapacity: 1
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      TargetGroupARNs:
        - !Ref BackendTargetGroup
        - !Ref FrontendTargetGroup
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-app-instance
          PropagateAtLaunch: true

  # ============================================
  # CLOUDWATCH ALARMS
  # ============================================

  HighCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${AWS::StackName}-high-cpu
      AlarmDescription: Alarma cuando CPU supera 80%
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 80
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AppAutoScalingGroup

  RDSStorageAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${AWS::StackName}-rds-low-storage
      AlarmDescription: Alarma cuando espacio libre es bajo
      MetricName: FreeStorageSpace
      Namespace: AWS/RDS
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: 2000000000
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: DBInstanceIdentifier
          Value: !Ref RDSInstance

# ============================================
# OUTPUTS
# ============================================

Outputs:
  LoadBalancerURL:
    Description: URL del Application Load Balancer
    Value: !Sub http://${ApplicationLoadBalancer.DNSName}
    Export:
      Name: !Sub ${AWS::StackName}-ALB-URL

  RDSEndpoint:
    Description: Endpoint de RDS PostgreSQL
    Value: !GetAtt RDSInstance.Endpoint.Address
    Export:
      Name: !Sub ${AWS::StackName}-RDS-Endpoint

  MongoDBEndpoint:
    Condition: UseSelfHostedMongoDB
    Description: Endpoint privado de MongoDB
    Value: !GetAtt MongoDBInstance.PrivateIp
    Export:
      Name: !Sub ${AWS::StackName}-MongoDB-Endpoint

  VPCId:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub ${AWS::StackName}-VPC-ID

  DBSecretARN:
    Description: ARN del secreto con credenciales de BD
    Value: !Ref DBSecret
    Export:
      Name: !Sub ${AWS::StackName}-DB-Secret-ARN